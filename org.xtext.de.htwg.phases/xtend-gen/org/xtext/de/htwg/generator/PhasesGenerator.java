/**
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.de.htwg.phases.COLORS_TYPE;
import org.xtext.de.htwg.phases.Game;
import org.xtext.de.htwg.phases.NUMBERS_TYPE;
import org.xtext.de.htwg.phases.Phase;
import org.xtext.de.htwg.phases.PhaseType;
import org.xtext.de.htwg.phases.STREET_TYPE;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PhasesGenerator extends AbstractGenerator {
  private String phaseType = "null";
  
  private String numbersTypes = "null";
  
  private String numberColors = "null";
  
  private String streetLenght = "null";
  
  private String firstNumType;
  
  private String secNumType;
  
  private int biggestNumType;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    final Game game = ((Game) _head);
    EList<Phase> _phases = game.getPhases();
    for (final Phase phase : _phases) {
      {
        this.phaseType = "null";
        this.numbersTypes = "null";
        this.numberColors = "null";
        this.streetLenght = "null";
        PhaseType _phaseType = phase.getPhaseType();
        NUMBERS_TYPE _numbersType = _phaseType.getNumbersType();
        boolean _notEquals = (!Objects.equal(_numbersType, null));
        if (_notEquals) {
          PhaseType _phaseType_1 = phase.getPhaseType();
          NUMBERS_TYPE _numbersType_1 = _phaseType_1.getNumbersType();
          String _name = _numbersType_1.getName();
          String _string = _name.toString();
          this.phaseType = _string;
          PhaseType _phaseType_2 = phase.getPhaseType();
          NUMBERS_TYPE _numbersType_2 = _phaseType_2.getNumbersType();
          EList<String> _numbersType_3 = _numbersType_2.getNumbersType();
          String _string_1 = _numbersType_3.toString();
          this.numbersTypes = _string_1;
          PhaseType _phaseType_3 = phase.getPhaseType();
          NUMBERS_TYPE _numbersType_4 = _phaseType_3.getNumbersType();
          EList<String> _numbersType_5 = _numbersType_4.getNumbersType();
          String _get = _numbersType_5.get(0);
          this.firstNumType = _get;
          PhaseType _phaseType_4 = phase.getPhaseType();
          NUMBERS_TYPE _numbersType_6 = _phaseType_4.getNumbersType();
          EList<String> _numbersType_7 = _numbersType_6.getNumbersType();
          String _get_1 = _numbersType_7.get(1);
          this.secNumType = _get_1;
          if ((Objects.equal(this.firstNumType, "QUADRUPLE") || Objects.equal(this.secNumType, "QUADRUPLE"))) {
            this.biggestNumType = 4;
          } else {
            if ((Objects.equal(this.firstNumType, "TRIPLE") || Objects.equal(this.secNumType, "TRIPLE"))) {
              this.biggestNumType = 3;
            } else {
              this.biggestNumType = 2;
            }
          }
        }
        PhaseType _phaseType_5 = phase.getPhaseType();
        COLORS_TYPE _colorType = _phaseType_5.getColorType();
        boolean _notEquals_1 = (!Objects.equal(_colorType, null));
        if (_notEquals_1) {
          PhaseType _phaseType_6 = phase.getPhaseType();
          COLORS_TYPE _colorType_1 = _phaseType_6.getColorType();
          String _name_1 = _colorType_1.getName();
          String _string_2 = _name_1.toString();
          this.phaseType = _string_2;
          PhaseType _phaseType_7 = phase.getPhaseType();
          COLORS_TYPE _colorType_2 = _phaseType_7.getColorType();
          int _numberColors = _colorType_2.getNumberColors();
          String _string_3 = Integer.valueOf(_numberColors).toString();
          this.numberColors = _string_3;
        }
        PhaseType _phaseType_8 = phase.getPhaseType();
        STREET_TYPE _streetType = _phaseType_8.getStreetType();
        boolean _notEquals_2 = (!Objects.equal(_streetType, null));
        if (_notEquals_2) {
          PhaseType _phaseType_9 = phase.getPhaseType();
          STREET_TYPE _streetType_1 = _phaseType_9.getStreetType();
          String _name_2 = _streetType_1.getName();
          String _string_4 = _name_2.toString();
          this.phaseType = _string_4;
          PhaseType _phaseType_10 = phase.getPhaseType();
          STREET_TYPE _streetType_2 = _phaseType_10.getStreetType();
          int _streetLenght = _streetType_2.getStreetLenght();
          String _string_5 = Integer.valueOf(_streetLenght).toString();
          this.streetLenght = _string_5;
        }
        int _phaseNumber = phase.getPhaseNumber();
        String _plus = ("Phase" + Integer.valueOf(_phaseNumber));
        String _plus_1 = (_plus + ".java");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("package model.phase.impl;");
        _builder.newLine();
        _builder.append("import model.deck.IDeckOfCards;");
        _builder.newLine();
        _builder.append("import model.phase.DeckNotFitException;");
        _builder.newLine();
        _builder.append("import model.phase.IPhase;");
        _builder.newLine();
        _builder.append("import model.stack.ICardStack;");
        _builder.newLine();
        _builder.append("import java.util.List;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Created by Tarek on 24.09.2015. Be grateful for this superior Code!");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* edited: Konraifen88");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* date: 30.09.2015");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* merged phase checker and getter");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* edited: daschwin");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* date: 20.07.2017");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* to be generated");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("public class Phase");
        int _phaseNumber_1 = phase.getPhaseNumber();
        _builder.append(_phaseNumber_1, "");
        _builder.append(" implements IPhase {");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public static final int PHASE_NUMBER = ");
        int _phaseNumber_2 = phase.getPhaseNumber();
        _builder.append(_phaseNumber_2, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("private static final String DESCRIPTION_PHASE = \"");
        String _phaseDescription = phase.getPhaseDescription();
        _builder.append(_phaseDescription, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = Objects.equal(this.phaseType, "NUMBERS");
          if (_equals) {
            _builder.append("private static final String DOUBLE = \"DOUBLE\";");
            _builder.newLine();
            _builder.append("private static final String TRIPLE = \"TRIPLE\";");
            _builder.newLine();
            _builder.append("private static final String QUADRUPLE = \"QUADRUPLE\";");
            _builder.newLine();
            _builder.append("private String[] numbersTypes=");
            _builder.append(this.numbersTypes, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            {
              boolean _equals_1 = Objects.equal(this.firstNumType, "DOUBLE");
              if (_equals_1) {
                _builder.append("private IPhaseChecker firstChecker = new ValueChecker(2); ");
                _builder.newLine();
              }
            }
            {
              boolean _equals_2 = Objects.equal(this.firstNumType, "TRIPLE");
              if (_equals_2) {
                _builder.append("private IPhaseChecker firstChecker = new ValueChecker(3);");
                _builder.newLine();
              }
            }
            {
              boolean _equals_3 = Objects.equal(this.firstNumType, "QUADRUPLE");
              if (_equals_3) {
                _builder.append("private IPhaseChecker firstChecker = new ValueChecker(4);");
                _builder.newLine();
              }
            }
            {
              boolean _equals_4 = Objects.equal(this.secNumType, "DOUBLE");
              if (_equals_4) {
                _builder.append("private IPhaseChecker secondChecker = new ValueChecker(2); ");
                _builder.newLine();
              }
            }
            {
              boolean _equals_5 = Objects.equal(this.secNumType, "TRIPLE");
              if (_equals_5) {
                _builder.append("private IPhaseChecker secondChecker = new ValueChecker(3);");
                _builder.newLine();
              }
            }
            {
              boolean _equals_6 = Objects.equal(this.secNumType, "QUADRUPLE");
              if (_equals_6) {
                _builder.append("private IPhaseChecker secondChecker = new ValueChecker(4);");
                _builder.newLine();
              }
            }
            _builder.append("private IPhaseSplitter phaseSplitter = new DeckSplitter(");
            _builder.append(this.biggestNumType, "");
            _builder.append(", new CardValueComparator());");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _equals_7 = Objects.equal(this.phaseType, "COLORS");
          if (_equals_7) {
            _builder.append("    ");
            _builder.append("private Integer numberColors = ");
            _builder.append(this.numberColors, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("private IPhaseChecker phaseChecker;");
            _builder.newLine();
          }
        }
        {
          boolean _equals_8 = Objects.equal(this.phaseType, "STREET");
          if (_equals_8) {
            _builder.append("    ");
            _builder.append("private Integer streetLenght = ");
            _builder.append(this.streetLenght, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("private IPhaseChecker phaseChecker;");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public Phase");
        int _phaseNumber_3 = phase.getPhaseNumber();
        _builder.append(_phaseNumber_3, "    ");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_9 = Objects.equal(this.phaseType, "STREET");
          if (_equals_9) {
            _builder.append("    ");
            _builder.append("phaseChecker = new StreetChecker(streetLenght);");
            _builder.newLine();
          }
        }
        {
          boolean _equals_10 = Objects.equal(this.phaseType, "COLORS");
          if (_equals_10) {
            _builder.append("    ");
            _builder.append("phaseChecker = new ColorChecker(numberColors);");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public String getDescription() {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("return DESCRIPTION_PHASE;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public List<ICardStack> splitAndCheckPhase(IDeckOfCards phase) throws DeckNotFitException {");
        _builder.newLine();
        {
          boolean _equals_11 = Objects.equal(this.phaseType, "NUMBERS");
          if (_equals_11) {
            _builder.append("List<IDeckOfCards> splitted = phaseSplitter.split(phase);");
            _builder.newLine();
            _builder.append("if (firstChecker.check(splitted.get(0)) && secondChecker.check(splitted.get(1)) ) {");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("return Arrays.asList(new PairStack(splitted.get(0)), new PairStack(splitted.get(1)));");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("throw new DeckNotFitException();");
            _builder.newLine();
          }
        }
        {
          boolean _equals_12 = Objects.equal(this.phaseType, "COLORS");
          if (_equals_12) {
            _builder.append("\t\t\t");
            _builder.append("if (phaseChecker.check(phase)) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("    ");
            _builder.append("return Collections.singletonList(new ColorStack(phase));");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("throw new DeckNotFitException();");
            _builder.newLine();
          }
        }
        {
          boolean _equals_13 = Objects.equal(this.phaseType, "STREET");
          if (_equals_13) {
            _builder.append("\t\t\t");
            _builder.append("if (phaseChecker.check(phase)) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("return Collections.singletonList(new StreetStack(phase));");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("throw new DeckNotFitException();");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public IPhase getNextPhase() {");
        _builder.newLine();
        {
          int _phaseNumber_4 = phase.getPhaseNumber();
          boolean _lessThan = (_phaseNumber_4 < 5);
          if (_lessThan) {
            _builder.append("    \t");
            _builder.append("return new Phase");
            int _phaseNumber_5 = phase.getPhaseNumber();
            int _plus_2 = (_phaseNumber_5 + 1);
            _builder.append(_plus_2, "    \t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          int _phaseNumber_6 = phase.getPhaseNumber();
          boolean _greaterEqualsThan = (_phaseNumber_6 >= 5);
          if (_greaterEqualsThan) {
            _builder.append("    \t");
            _builder.append("return new Phase5();");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public int getPhaseNumber() {");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("return PHASE_NUMBER;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public boolean isNumberPhase() {");
        _builder.newLine();
        {
          boolean _equals_14 = Objects.equal(this.phaseType, "NUMBERS");
          if (_equals_14) {
            _builder.append("    \t");
            _builder.append("return true;");
            _builder.newLine();
          }
        }
        {
          boolean _notEquals_3 = (!Objects.equal(this.phaseType, "NUMBERS"));
          if (_notEquals_3) {
            _builder.append("    \t");
            _builder.append("return false;");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public String toString() {");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("return \"Phase\" + PHASE_NUMBER;");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        fsa.generateFile(_plus_1, _builder);
      }
    }
  }
}
