/*
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.de.htwg.phases.COLORS_TYPE;
import org.xtext.de.htwg.phases.Game;
import org.xtext.de.htwg.phases.NUMBERS_TYPE;
import org.xtext.de.htwg.phases.Phase;
import org.xtext.de.htwg.phases.PhaseType;
import org.xtext.de.htwg.phases.PhasesPackage;
import org.xtext.de.htwg.phases.STREET_TYPE;
import org.xtext.de.htwg.services.PhasesGrammarAccess;

@SuppressWarnings("all")
public class PhasesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PhasesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PhasesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PhasesPackage.COLORS_TYPE:
				sequence_COLORS_TYPE(context, (COLORS_TYPE) semanticObject); 
				return; 
			case PhasesPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case PhasesPackage.NUMBERS_TYPE:
				sequence_NUMBERS_TYPE(context, (NUMBERS_TYPE) semanticObject); 
				return; 
			case PhasesPackage.PHASE:
				sequence_Phase(context, (Phase) semanticObject); 
				return; 
			case PhasesPackage.PHASE_TYPE:
				sequence_PhaseType(context, (PhaseType) semanticObject); 
				return; 
			case PhasesPackage.STREET_TYPE:
				sequence_STREET_TYPE(context, (STREET_TYPE) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     COLORS_TYPE returns COLORS_TYPE
	 *
	 * Constraint:
	 *     (name='COLORS' numberColors=INT)
	 */
	protected void sequence_COLORS_TYPE(ISerializationContext context, COLORS_TYPE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.COLORS_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.COLORS_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.COLORS_TYPE__NUMBER_COLORS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.COLORS_TYPE__NUMBER_COLORS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCOLORS_TYPEAccess().getNameCOLORSKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsINTTerminalRuleCall_2_0(), semanticObject.getNumberColors());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (phase1=Phase phase2=Phase phase3=Phase phase4=Phase phase5=Phase)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.GAME__PHASE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.GAME__PHASE1));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.GAME__PHASE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.GAME__PHASE2));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.GAME__PHASE3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.GAME__PHASE3));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.GAME__PHASE4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.GAME__PHASE4));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.GAME__PHASE5) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.GAME__PHASE5));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGameAccess().getPhase1PhaseParserRuleCall_0_0(), semanticObject.getPhase1());
		feeder.accept(grammarAccess.getGameAccess().getPhase2PhaseParserRuleCall_1_0(), semanticObject.getPhase2());
		feeder.accept(grammarAccess.getGameAccess().getPhase3PhaseParserRuleCall_2_0(), semanticObject.getPhase3());
		feeder.accept(grammarAccess.getGameAccess().getPhase4PhaseParserRuleCall_3_0(), semanticObject.getPhase4());
		feeder.accept(grammarAccess.getGameAccess().getPhase5PhaseParserRuleCall_4_0(), semanticObject.getPhase5());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NUMBERS_TYPE returns NUMBERS_TYPE
	 *
	 * Constraint:
	 *     (name='NUMBERS' numbersType+=NUMBERS*)
	 */
	protected void sequence_NUMBERS_TYPE(ISerializationContext context, NUMBERS_TYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhaseType returns PhaseType
	 *
	 * Constraint:
	 *     (streetType=STREET_TYPE | numbersType=NUMBERS_TYPE | colorType=COLORS_TYPE)
	 */
	protected void sequence_PhaseType(ISerializationContext context, PhaseType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Phase returns Phase
	 *
	 * Constraint:
	 *     (phaseNumber=INT phaseType=PhaseType)
	 */
	protected void sequence_Phase(ISerializationContext context, Phase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.PHASE__PHASE_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.PHASE__PHASE_NUMBER));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.PHASE__PHASE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.PHASE__PHASE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPhaseAccess().getPhaseNumberINTTerminalRuleCall_1_0(), semanticObject.getPhaseNumber());
		feeder.accept(grammarAccess.getPhaseAccess().getPhaseTypePhaseTypeParserRuleCall_2_0(), semanticObject.getPhaseType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STREET_TYPE returns STREET_TYPE
	 *
	 * Constraint:
	 *     (name='STREET' streetLenght=INT)
	 */
	protected void sequence_STREET_TYPE(ISerializationContext context, STREET_TYPE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.STREET_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.STREET_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, PhasesPackage.Literals.STREET_TYPE__STREET_LENGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PhasesPackage.Literals.STREET_TYPE__STREET_LENGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTREET_TYPEAccess().getNameSTREETKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtINTTerminalRuleCall_2_0(), semanticObject.getStreetLenght());
		feeder.finish();
	}
	
	
}
