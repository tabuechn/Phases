/*
 * generated by Xtext 2.11.0
 */
grammar InternalPhases;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.de.htwg.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.de.htwg.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.de.htwg.services.PhasesGrammarAccess;

}
@parser::members {
	private PhasesGrammarAccess grammarAccess;

	public void setGrammarAccess(PhasesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getGroup()); }
		(rule__Game__Group__0)
		{ after(grammarAccess.getGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhase
entryRulePhase
:
{ before(grammarAccess.getPhaseRule()); }
	 rulePhase
{ after(grammarAccess.getPhaseRule()); } 
	 EOF 
;

// Rule Phase
rulePhase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhaseAccess().getGroup()); }
		(rule__Phase__Group__0)
		{ after(grammarAccess.getPhaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhaseType
entryRulePhaseType
:
{ before(grammarAccess.getPhaseTypeRule()); }
	 rulePhaseType
{ after(grammarAccess.getPhaseTypeRule()); } 
	 EOF 
;

// Rule PhaseType
rulePhaseType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhaseTypeAccess().getAlternatives()); }
		(rule__PhaseType__Alternatives)
		{ after(grammarAccess.getPhaseTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBERS_TYPE
entryRuleNUMBERS_TYPE
:
{ before(grammarAccess.getNUMBERS_TYPERule()); }
	 ruleNUMBERS_TYPE
{ after(grammarAccess.getNUMBERS_TYPERule()); } 
	 EOF 
;

// Rule NUMBERS_TYPE
ruleNUMBERS_TYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERS_TYPEAccess().getGroup()); }
		(rule__NUMBERS_TYPE__Group__0)
		{ after(grammarAccess.getNUMBERS_TYPEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBERS
entryRuleNUMBERS
:
{ before(grammarAccess.getNUMBERSRule()); }
	 ruleNUMBERS
{ after(grammarAccess.getNUMBERSRule()); } 
	 EOF 
;

// Rule NUMBERS
ruleNUMBERS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERSAccess().getAlternatives()); }
		(rule__NUMBERS__Alternatives)
		{ after(grammarAccess.getNUMBERSAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOLORS_TYPE
entryRuleCOLORS_TYPE
:
{ before(grammarAccess.getCOLORS_TYPERule()); }
	 ruleCOLORS_TYPE
{ after(grammarAccess.getCOLORS_TYPERule()); } 
	 EOF 
;

// Rule COLORS_TYPE
ruleCOLORS_TYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOLORS_TYPEAccess().getGroup()); }
		(rule__COLORS_TYPE__Group__0)
		{ after(grammarAccess.getCOLORS_TYPEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTREET_TYPE
entryRuleSTREET_TYPE
:
{ before(grammarAccess.getSTREET_TYPERule()); }
	 ruleSTREET_TYPE
{ after(grammarAccess.getSTREET_TYPERule()); } 
	 EOF 
;

// Rule STREET_TYPE
ruleSTREET_TYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTREET_TYPEAccess().getGroup()); }
		(rule__STREET_TYPE__Group__0)
		{ after(grammarAccess.getSTREET_TYPEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhaseType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseTypeAccess().getStreetTypeAssignment_0()); }
		(rule__PhaseType__StreetTypeAssignment_0)
		{ after(grammarAccess.getPhaseTypeAccess().getStreetTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPhaseTypeAccess().getNumbersTypeAssignment_1()); }
		(rule__PhaseType__NumbersTypeAssignment_1)
		{ after(grammarAccess.getPhaseTypeAccess().getNumbersTypeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPhaseTypeAccess().getColorTypeAssignment_2()); }
		(rule__PhaseType__ColorTypeAssignment_2)
		{ after(grammarAccess.getPhaseTypeAccess().getColorTypeAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMBERSAccess().getDOUBLEKeyword_0()); }
		'DOUBLE'
		{ after(grammarAccess.getNUMBERSAccess().getDOUBLEKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERSAccess().getTRIPLEKeyword_1()); }
		'TRIPLE'
		{ after(grammarAccess.getNUMBERSAccess().getTRIPLEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERSAccess().getQUADRUPLEKeyword_2()); }
		'QUADRUPLE'
		{ after(grammarAccess.getNUMBERSAccess().getQUADRUPLEKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__0__Impl
	rule__Game__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPhase1Assignment_0()); }
	(rule__Game__Phase1Assignment_0)
	{ after(grammarAccess.getGameAccess().getPhase1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__1__Impl
	rule__Game__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPhase2Assignment_1()); }
	(rule__Game__Phase2Assignment_1)
	{ after(grammarAccess.getGameAccess().getPhase2Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__2__Impl
	rule__Game__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPhase3Assignment_2()); }
	(rule__Game__Phase3Assignment_2)
	{ after(grammarAccess.getGameAccess().getPhase3Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__3__Impl
	rule__Game__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPhase4Assignment_3()); }
	(rule__Game__Phase4Assignment_3)
	{ after(grammarAccess.getGameAccess().getPhase4Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getPhase5Assignment_4()); }
	(rule__Game__Phase5Assignment_4)
	{ after(grammarAccess.getGameAccess().getPhase5Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Phase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phase__Group__0__Impl
	rule__Phase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhaseAccess().getPHASEKeyword_0()); }
	'PHASE'
	{ after(grammarAccess.getPhaseAccess().getPHASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phase__Group__1__Impl
	rule__Phase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhaseAccess().getPhaseNumberAssignment_1()); }
	(rule__Phase__PhaseNumberAssignment_1)
	{ after(grammarAccess.getPhaseAccess().getPhaseNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhaseAccess().getPhaseTypeAssignment_2()); }
	(rule__Phase__PhaseTypeAssignment_2)
	{ after(grammarAccess.getPhaseAccess().getPhaseTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBERS_TYPE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBERS_TYPE__Group__0__Impl
	rule__NUMBERS_TYPE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERS_TYPEAccess().getNameAssignment_0()); }
	(rule__NUMBERS_TYPE__NameAssignment_0)
	{ after(grammarAccess.getNUMBERS_TYPEAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBERS_TYPE__Group__1__Impl
	rule__NUMBERS_TYPE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERS_TYPEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getNUMBERS_TYPEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBERS_TYPE__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERS_TYPEAccess().getNumbersTypeAssignment_2()); }
	(rule__NUMBERS_TYPE__NumbersTypeAssignment_2)*
	{ after(grammarAccess.getNUMBERS_TYPEAccess().getNumbersTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COLORS_TYPE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COLORS_TYPE__Group__0__Impl
	rule__COLORS_TYPE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOLORS_TYPEAccess().getNameAssignment_0()); }
	(rule__COLORS_TYPE__NameAssignment_0)
	{ after(grammarAccess.getCOLORS_TYPEAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COLORS_TYPE__Group__1__Impl
	rule__COLORS_TYPE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOLORS_TYPEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCOLORS_TYPEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COLORS_TYPE__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsAssignment_2()); }
	(rule__COLORS_TYPE__NumberColorsAssignment_2)
	{ after(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STREET_TYPE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STREET_TYPE__Group__0__Impl
	rule__STREET_TYPE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTREET_TYPEAccess().getNameAssignment_0()); }
	(rule__STREET_TYPE__NameAssignment_0)
	{ after(grammarAccess.getSTREET_TYPEAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STREET_TYPE__Group__1__Impl
	rule__STREET_TYPE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTREET_TYPEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getSTREET_TYPEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STREET_TYPE__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtAssignment_2()); }
	(rule__STREET_TYPE__StreetLenghtAssignment_2)
	{ after(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Game__Phase1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPhase1PhaseParserRuleCall_0_0()); }
		rulePhase
		{ after(grammarAccess.getGameAccess().getPhase1PhaseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Phase2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPhase2PhaseParserRuleCall_1_0()); }
		rulePhase
		{ after(grammarAccess.getGameAccess().getPhase2PhaseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Phase3Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPhase3PhaseParserRuleCall_2_0()); }
		rulePhase
		{ after(grammarAccess.getGameAccess().getPhase3PhaseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Phase4Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPhase4PhaseParserRuleCall_3_0()); }
		rulePhase
		{ after(grammarAccess.getGameAccess().getPhase4PhaseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Phase5Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getPhase5PhaseParserRuleCall_4_0()); }
		rulePhase
		{ after(grammarAccess.getGameAccess().getPhase5PhaseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__PhaseNumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseAccess().getPhaseNumberINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPhaseAccess().getPhaseNumberINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phase__PhaseTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseAccess().getPhaseTypePhaseTypeParserRuleCall_2_0()); }
		rulePhaseType
		{ after(grammarAccess.getPhaseAccess().getPhaseTypePhaseTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhaseType__StreetTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseTypeAccess().getStreetTypeSTREET_TYPEParserRuleCall_0_0()); }
		ruleSTREET_TYPE
		{ after(grammarAccess.getPhaseTypeAccess().getStreetTypeSTREET_TYPEParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhaseType__NumbersTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseTypeAccess().getNumbersTypeNUMBERS_TYPEParserRuleCall_1_0()); }
		ruleNUMBERS_TYPE
		{ after(grammarAccess.getPhaseTypeAccess().getNumbersTypeNUMBERS_TYPEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhaseType__ColorTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhaseTypeAccess().getColorTypeCOLORS_TYPEParserRuleCall_2_0()); }
		ruleCOLORS_TYPE
		{ after(grammarAccess.getPhaseTypeAccess().getColorTypeCOLORS_TYPEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMBERS_TYPEAccess().getNameNUMBERSKeyword_0_0()); }
		(
			{ before(grammarAccess.getNUMBERS_TYPEAccess().getNameNUMBERSKeyword_0_0()); }
			'NUMBERS'
			{ after(grammarAccess.getNUMBERS_TYPEAccess().getNameNUMBERSKeyword_0_0()); }
		)
		{ after(grammarAccess.getNUMBERS_TYPEAccess().getNameNUMBERSKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBERS_TYPE__NumbersTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMBERS_TYPEAccess().getNumbersTypeNUMBERSParserRuleCall_2_0()); }
		ruleNUMBERS
		{ after(grammarAccess.getNUMBERS_TYPEAccess().getNumbersTypeNUMBERSParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOLORS_TYPEAccess().getNameCOLORSKeyword_0_0()); }
		(
			{ before(grammarAccess.getCOLORS_TYPEAccess().getNameCOLORSKeyword_0_0()); }
			'COLORS'
			{ after(grammarAccess.getCOLORS_TYPEAccess().getNameCOLORSKeyword_0_0()); }
		)
		{ after(grammarAccess.getCOLORS_TYPEAccess().getNameCOLORSKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COLORS_TYPE__NumberColorsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTREET_TYPEAccess().getNameSTREETKeyword_0_0()); }
		(
			{ before(grammarAccess.getSTREET_TYPEAccess().getNameSTREETKeyword_0_0()); }
			'STREET'
			{ after(grammarAccess.getSTREET_TYPEAccess().getNameSTREETKeyword_0_0()); }
		)
		{ after(grammarAccess.getSTREET_TYPEAccess().getNameSTREETKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STREET_TYPE__StreetLenghtAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
