/*
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.de.htwg.ide.contentassist.antlr.internal.InternalPhasesParser;
import org.xtext.de.htwg.services.PhasesGrammarAccess;

public class PhasesParser extends AbstractContentAssistParser {

	@Inject
	private PhasesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPhasesParser createParser() {
		InternalPhasesParser result = new InternalPhasesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPhaseTypeAccess().getAlternatives(), "rule__PhaseType__Alternatives");
					put(grammarAccess.getNUMBERSAccess().getAlternatives(), "rule__NUMBERS__Alternatives");
					put(grammarAccess.getGameAccess().getGroup(), "rule__Game__Group__0");
					put(grammarAccess.getPhaseAccess().getGroup(), "rule__Phase__Group__0");
					put(grammarAccess.getNUMBERS_TYPEAccess().getGroup(), "rule__NUMBERS_TYPE__Group__0");
					put(grammarAccess.getCOLORS_TYPEAccess().getGroup(), "rule__COLORS_TYPE__Group__0");
					put(grammarAccess.getSTREET_TYPEAccess().getGroup(), "rule__STREET_TYPE__Group__0");
					put(grammarAccess.getGameAccess().getPhase1Assignment_0(), "rule__Game__Phase1Assignment_0");
					put(grammarAccess.getGameAccess().getPhase2Assignment_1(), "rule__Game__Phase2Assignment_1");
					put(grammarAccess.getGameAccess().getPhase3Assignment_2(), "rule__Game__Phase3Assignment_2");
					put(grammarAccess.getGameAccess().getPhase4Assignment_3(), "rule__Game__Phase4Assignment_3");
					put(grammarAccess.getGameAccess().getPhase5Assignment_4(), "rule__Game__Phase5Assignment_4");
					put(grammarAccess.getPhaseAccess().getPhaseNumberAssignment_1(), "rule__Phase__PhaseNumberAssignment_1");
					put(grammarAccess.getPhaseAccess().getPhaseTypeAssignment_2(), "rule__Phase__PhaseTypeAssignment_2");
					put(grammarAccess.getPhaseTypeAccess().getStreetTypeAssignment_0(), "rule__PhaseType__StreetTypeAssignment_0");
					put(grammarAccess.getPhaseTypeAccess().getNumbersTypeAssignment_1(), "rule__PhaseType__NumbersTypeAssignment_1");
					put(grammarAccess.getPhaseTypeAccess().getColorTypeAssignment_2(), "rule__PhaseType__ColorTypeAssignment_2");
					put(grammarAccess.getNUMBERS_TYPEAccess().getNameAssignment_0(), "rule__NUMBERS_TYPE__NameAssignment_0");
					put(grammarAccess.getNUMBERS_TYPEAccess().getNumbersTypeAssignment_2(), "rule__NUMBERS_TYPE__NumbersTypeAssignment_2");
					put(grammarAccess.getCOLORS_TYPEAccess().getNameAssignment_0(), "rule__COLORS_TYPE__NameAssignment_0");
					put(grammarAccess.getCOLORS_TYPEAccess().getNumberColorsAssignment_2(), "rule__COLORS_TYPE__NumberColorsAssignment_2");
					put(grammarAccess.getSTREET_TYPEAccess().getNameAssignment_0(), "rule__STREET_TYPE__NameAssignment_0");
					put(grammarAccess.getSTREET_TYPEAccess().getStreetLenghtAssignment_2(), "rule__STREET_TYPE__StreetLenghtAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PhasesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PhasesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
